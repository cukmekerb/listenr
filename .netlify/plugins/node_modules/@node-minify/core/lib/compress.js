"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compress = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _utils = require("@node-minify/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * node-minify
 * Copyright(c) 2011-2020 Rodolphe Stoclin
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

/**
 * Run compressor.
 *
 * @param {Object} settings
 */
const compress = settings => {
  if (typeof settings.compressor !== 'function') {
    throw new Error(`compressor should be a function, maybe you forgot to install the compressor`);
  }

  createDirectory(settings.output);

  if (Array.isArray(settings.output)) {
    return settings.sync ? compressArrayOfFilesSync(settings) : compressArrayOfFilesAsync(settings);
  } else {
    return _utils.utils.compressSingleFile(settings);
  }
};
/**
 * Compress an array of files in sync.
 *
 * @param {Object} settings
 */


exports.compress = compress;

const compressArrayOfFilesSync = settings => {
  return settings.input.forEach((input, index) => {
    const content = _utils.utils.getContentFromFiles(input);

    return _utils.utils.runSync({
      settings,
      content,
      index
    });
  });
};
/**
 * Compress an array of files in async.
 *
 * @param {Object} settings
 */


const compressArrayOfFilesAsync = settings => {
  let sequence = Promise.resolve();
  settings.input.forEach((input, index) => {
    const content = _utils.utils.getContentFromFiles(input);

    sequence = sequence.then(() => _utils.utils.runAsync({
      settings,
      content,
      index
    }));
  });
  return sequence;
};
/**
 * Create folder of the target file.
 *
 * @param {String} file - Full path of the file
 */


const createDirectory = file => {
  if (Array.isArray(file)) {
    file = file[0];
  }

  const dir = file.substr(0, file.lastIndexOf('/'));

  if (!dir) {
    return;
  }

  if (!_fs.default.statSync(dir).isDirectory()) {
    _mkdirp.default.sync(dir);
  }
};
/**
 * Expose `compress()`.
 */